name: Generate Repo Structure

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  generate-structure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build JSON & overwrite README.md (strict YAML)
        run: |
          set -euo pipefail
          python3 - << 'PY'
          import os, json, sys, re
          try:
              import yaml
          except ImportError:
              import subprocess, sys
              subprocess.check_call([sys.executable, "-m", "pip", "install", "pyyaml"])
              import yaml

          repo = os.environ.get("GITHUB_REPOSITORY", "")
          repo_name = repo.split("/")[-1] if repo else os.path.basename(os.getcwd())

          def is_hidden(path):
              return any(part.startswith('.') for part in path.split(os.sep) if part)

          structure = {}

          for root, dirs, files in os.walk(".", topdown=True):
              dirs[:] = [d for d in dirs if not d.startswith('.')]
              if is_hidden(os.path.relpath(root, ".")) and root != ".":
                  continue
              key = os.path.normpath(root)
              dkey = "." if key == "." else "./" + os.path.relpath(root, ".")
              entries = {}
              for fname in sorted(files):
                  if fname.startswith('.'):
                      continue
                  fpath = os.path.join(root, fname)
                  if fname.lower().endswith(".md"):
                      with open(fpath, "r", encoding="utf-8") as f:
                          text = f.read()
                      m = re.match(r"^---\s*\n(.*?)\n---\s*\n?", text, re.DOTALL)
                      if m:
                          front = m.group(1)
                          try:
                              meta = yaml.safe_load(front) or {}
                              if not isinstance(meta, dict):
                                  raise yaml.YAMLError("Front matter is not a mapping")
                              
                              # Ensure 'tag' is present, default to empty string if not
                              if 'tag' not in meta:
                                  meta['tag'] = ''
                              
                              entries[fname] = meta
                          except yaml.YAMLError as e:
                              sys.stderr.write(f"Malformed YAML in {fpath}: {e}\n")
                              sys.exit(1)
                      else:
                          entries[fname] = {}
                  else:
                      entries[fname] = {}
              structure[dkey] = entries

          out = {"repo": repo_name, "structure": structure}
          with open("README.md", "w", encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)
          PY

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update repo structure in README.md" || echo "No changes to commit"
          git push origin HEAD:main
